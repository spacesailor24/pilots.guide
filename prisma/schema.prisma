// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String              @id @default(cuid())
  username            String?             @unique // Discord username
  email               String?             @unique // Required by NextAuth PrismaAdapter
  emailVerified       DateTime?           // Required by NextAuth PrismaAdapter
  displayName         String?             // Name shown in app (e.g., "bjax", "MrOldMaan")
  image               String?
  claimed             Boolean             @default(false) // Track if user account is claimed
  accounts            Account[]
  sessions            Session[]
  builds              Build[]
  permissions         UserPermission[]
  createdTournaments  Tournament[]        // Tournaments this user created
  tournamentPlayers   TournamentPlayer[]  // Tournament participations
  roundWins           Round[]             // Rounds this user won
  playerRating        PlayerRating?       // Rating for matchmaking
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Ship and Build models
model Ship {
  id        String   @id @default(cuid())
  shipId    String   @unique // e.g., "gladius", "arrow"
  name      String   // e.g., "Gladius", "Arrow"
  category  String   // e.g., "Light Fighter", "Heavy Fighter"
  imagePath String?
  maxCrew   Int      @default(1)
  builds    Build[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  order     Int      @default(0)
  builds    Build[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Patch {
  id        String   @id @default(cuid())
  version   String   @unique
  name      String?
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  builds    Build[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Build {
  id          String    @id @default(cuid())
  buildName   String
  creator     String
  userId      String?   // Optional link to authenticated user
  shipId      String
  categoryId  String
  patchId     String
  erkulUrl    String
  description String?   @db.Text
  featured    Boolean   @default(false)
  ship        Ship      @relation(fields: [shipId], references: [id])
  user        User?     @relation(fields: [userId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])
  patch       Patch     @relation(fields: [patchId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([shipId])
  @@index([userId])
  @@index([categoryId])
  @@index([patchId])
}

// Permissions system
model Permission {
  id          String           @id @default(cuid())
  name        String           @unique // e.g., "MATCHMAKING_VIEW", "ADMIN", "MODERATOR"
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  users       UserPermission[]
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  permissionId String
  grantedAt    DateTime   @default(now())
  grantedBy    String?    // Optional: track who granted the permission
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
  @@index([userId])
  @@index([permissionId])
}

// Tournament system
model Tournament {
  id          String            @id @default(cuid())
  name        String
  startTime   DateTime
  endTime     DateTime?
  createdBy   String
  creator     User             @relation(fields: [createdBy], references: [id])
  players     TournamentPlayer[]
  matches     Match[]          // Multiple matches per tournament
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@index([createdBy])
  @@index([startTime])
}

model TournamentPlayer {
  id           String     @id @default(cuid())
  tournamentId String
  userId       String
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  user         User       @relation(fields: [userId], references: [id])

  @@unique([tournamentId, userId])
  @@index([tournamentId])
  @@index([userId])
}

// Individual matches within a tournament
model Match {
  id           String     @id @default(cuid())
  tournamentId String
  name         String     // e.g., "Semifinals Match 1", "Final"
  startTime    DateTime
  endTime      DateTime?
  tournament   Tournament @relation(fields: [tournamentId], references: [id], onDelete: Cascade)
  rounds       Round[]    // Multiple rounds per match
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([tournamentId])
  @@index([startTime])
}

// Individual rounds within a match
model Round {
  id        String   @id @default(cuid())
  matchId   String
  roundNumber Int    // Round 1, 2, 3, etc.
  startTime DateTime
  endTime   DateTime?
  winnerId  String?  // Optional winner of this round
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  winner    User?    @relation(fields: [winnerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([matchId, roundNumber])
  @@index([matchId])
  @@index([winnerId])
}

// Player rating system for matchmaking
model PlayerRating {
  id          String   @id @default(cuid())
  userId      String   @unique
  mu          Float    @default(25.0)    // Skill mean (OpenSkill default)
  sigma       Float    @default(8.333)   // Skill uncertainty (OpenSkill default)
  gamesPlayed Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}
